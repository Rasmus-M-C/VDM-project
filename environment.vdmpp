class environment
types
    public Time = nat;
    public inline = car`licenseplate * car`typeCar;
    public outline = car`licenseplate * Time * real;
    public carEntry = car`licenseplate * car`typeCar * Time * Time;


instance variables
    io : IO := new IO();
    endSimTime : Time := 5;
    carSchedule : seq of carEntry := [];
    outlines : seq of outline := [];
    parked : seq of carEntry := [];
    controllerRef : controller;
    alreadyPrintedEmpty : bool := false;
operations

public environment : seq of char * controller ==> environment
environment(file, controllerInit) ==
(
    controllerRef := controllerInit;
    def mk_(-, input) = io.freadval[seq of carEntry](file) 
    in
        carSchedule := input;
);
public Simulate : () ==> ()
    Simulate() ==
    (world`timerRef.SetEndSimTime(endSimTime);
    while world`timerRef.getTime() < endSimTime do
    (
        updateGarage();
        world`timerRef.Step();
        printParkedCars();
    );

    --report();
    
    );

public printParkedCars: () ==> ()
printParkedCars() ==
(
    IO`println("Current time: " ^ natToString(world`timerRef.getTime()));
    IO`println("-----------------------------------------------");
    IO`println("Plate      | Type     | Enter Time | Leave Time");
    IO`println("-----------------------------------------------");

    for car in parked do
    (
        IO`println(
            car.#1 ^ " | " ^
            (if car.#2 = <electric> then "Electric " else "Gas      ") ^ " | " ^
            natToString(car.#3) ^ "         | " ^
            natToString(car.#4)
        );
    );

    

    if parked = [] and not alreadyPrintedEmpty then
    (
        IO`println("No cars in the garage.");
        alreadyPrintedEmpty := true;
    );
    IO`println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
);

public static natToString : nat ==> seq of char 
		natToString(n) ==
		(
			return VDMUtil`val2seq_of_char[nat](n);
		);
public updateGarage: () ==> ()
updateGarage() ==
(
    -- Process any cars scheduled to enter at the current time
    if carSchedule <> [] then
    (
        let carEntry = hd carSchedule in
        if carEntry.#3 = world`timerRef.getTime() then
        (
            dcl newCar : car := new car(carEntry.#1, mk_(-1, -1, -1), carEntry.#3, carEntry.#2);
            controllerRef.enterGarage(newCar);  -- Add car to garage
            parked := parked ^ [carEntry];      -- Add car to parked
            carSchedule := tl carSchedule;      -- Remove from schedule
        )
    );

    -- Process cars scheduled to exit at the current time
    parked := [p | p in seq parked & p.#4 <> world`timerRef.getTime()];

    -- Remove the cars from the controller
    for parkedCar in  parked do
    (
        if parkedCar.#4 = world`timerRef.getTime() then
        (
            dcl carToExit : [car] := controllerRef.lookupCar(parkedCar.#1);  -- Find the car by plate
            if carToExit <> nil then
                controllerRef.leaveGarage(carToExit);  -- Remove the car from the garage
        )
    );
);


public report: () ==> ()
report() ==
(
    IO`println("Report: Cars Leaving and Payments Summary");
    IO`println("------------------------------------------");    

);

end environment